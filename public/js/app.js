// Generated by CoffeeScript 1.4.0
(function() {
  var Buffer, RandomInteger, addNewPoint, averageCanvas, dataStream, generator, rollingAverages, updateData, valueCanvas;

  RandomInteger = (function() {

    function RandomInteger(options) {
      if (options == null) {
        options = {};
      }
      this.min = options.min || 0;
      this.max = options.max || 100;
    }

    RandomInteger.prototype.generate = function() {
      return _.random(this.min, this.max);
    };

    return RandomInteger;

  })();

  Buffer = (function() {

    function Buffer(options) {
      if (options == null) {
        options = {};
      }
      this.queue = [];
      this.maxSize = options.maxSize || 10;
    }

    Buffer.prototype.add = function(value) {
      this.queue.push(value);
      if (this.queue.length > this.maxSize) {
        return this.queue.shift();
      }
    };

    Buffer.prototype.values = function() {
      return this.queue;
    };

    Buffer.prototype.average = function() {
      return _.reduce(this.queue, function(memo, value) {
        return memo + value;
      }) / this.queue.length;
    };

    return Buffer;

  })();

  generator = new RandomInteger;

  dataStream = new Buffer({
    maxSize: 10
  });

  rollingAverages = new Buffer({
    maxSize: 10
  });

  valueCanvas = d3.select("#dataList");

  averageCanvas = d3.select("#averageList");

  updateData = function() {
    var averages, list;
    list = valueCanvas.selectAll("li").data(dataStream.values());
    list.enter().append("li").text(function(value) {
      return value;
    }).style("color", "#999").transition().style("color", "#333").duration(500);
    list.text(function(value) {
      return value;
    });
    list.exit().remove();
    averages = averageCanvas.selectAll("li").data(rollingAverages.values());
    averages.enter().append("li").text(function(value) {
      return value;
    }).style("color", "#ccc").transition().style("color", "#999").duration(750);
    averages.text(function(value) {
      return Math.floor(value);
    });
    return averages.exit().remove();
  };

  addNewPoint = function() {
    return dataStream.add(generator.generate());
  };

  setInterval(function() {
    addNewPoint();
    rollingAverages.add(dataStream.average());
    return updateData();
  }, 1000);

}).call(this);
